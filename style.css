const express = require('express');
const path = require('path');
const axios = require('axios'); 
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json()); 
app.use(express.static(path.join(__dirname, 'public'))); 


app.post('/download', async (req, res) => {
    const tiktokUrl = req.body.url;

    if (!tiktokUrl) {
        return res.status(400).json({ success: false, message: 'الرجاء توفير رابط فيديو تيك توك.' });
    }

    try {
        const lovetikApiUrl = "https://lovetik.com/api/ajax/search";
        
        
        const payload = {
            query: tiktokUrl // رابط تيك توك الذي أدخله المستخدم
        };

        
        const headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.9",
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Referer": "https://lovetik.com/", 
            "Origin": "https://lovetik.com"
        };

        
        const apiResponse = await axios.post(lovetikApiUrl, new URLSearchParams(payload).toString(), { headers });

    
        const data = apiResponse.data;


        const cheerio = require('cheerio'); 
        const $ = cheerio.load(data.html); 

        let downloadLink = null;
        let downloadLinkNoWatermark = null;
        let downloadLinkAudio = null;

        
        $('a.btn.btn-main.video-btn').each((i, elem) => {
            const href = $(elem).attr('href');
            const text = $(elem).text().trim();
            if (text.includes('بدون علامة مائية') || text.includes('No Watermark')) {
                downloadLinkNoWatermark = href;
            } else if (text.includes('جودة عالية') || text.includes('HD Quality')) {
                downloadLink = href;
            }
        });
        
        
        $('a.btn.btn-main.audio-btn').each((i, elem) => {
            const href = $(elem).attr('href');
            const text = $(elem).text().trim();
            if (text.includes('صوت') || text.includes('MP3')) {
                downloadLinkAudio = href;
            }
        });

        
        const finalDownloadLink = downloadLinkNoWatermark || downloadLink || downloadLinkAudio;


        if (finalDownloadLink) {
            res.json({ success: true, downloadLink: finalDownloadLink });
        } else {
            
            res.status(500).json({ 
                success: false, 
                message: data.mess || 'لم نتمكن من العثور على رابط التحميل. تأكد من صحة الرابط أو حاول لاحقاً.',
                debugHtml: data.html 
            });
        }

    } catch (error) {
        console.error('Error processing TikTok URL:', error.message);
        
        if (error.response) {
            
            console.error('API Response Error:', error.response.data);
            res.status(error.response.status).json({ success: false, message: `خطأ من خدمة التحميل: ${error.response.statusText || 'خطأ غير معروف.'}` });
        } else if (error.request) {
            
            console.error('API Request Error:', error.request);
            res.status(500).json({ success: false, message: 'لا يمكن الاتصال بخدمة التحميل. تأكد من اتصالك بالإنترنت.' });
        } else {
            
            res.status(500).json({ success: false, message: `حدث خطأ غير متوقع: ${error.message}` });
        }
    }
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
    console.log(`Open http://localhost:${port} in your browser.`);
});

